;; lisp/init-meow.el -*- lexical-binding: t; -*-
(require 'quelpa)
(require 'quelpa-use-package)

(defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  ;; (keypad . "(*・∀・)")
  ;; (motion . "*(੭*ˊᵕˋ)੭*")
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("J" . meow-next-expand)
   '("K" . meow-prev-expand))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . meow-motion-origin-command)
   '("k" . meow-motion-origin-command)
   ;'("ss" . swiper)
   '("o" . scimax-org/body)
   '("f" . find-file)
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))

;;Leader Key
;;prefix command
(define-prefix-command 'meow-h-command)
(define-prefix-command 'meow-g-command)
(define-prefix-command 'meow-f-command)

(meow-normal-define-key
   ;;Basic
   '("f" . meow-f-command)
   '("ff" . counsel-find-file)
   '("g" . meow-g-command)
   '("gg" . beginning-of-buffer)
   '("gf" . xref-find-definitions)
   '("G" . end-of-buffer)
   '("Q" . emacs-session-save)
  ;'("0" . meow-expand-0)
   '("0" . beginning-of-line)
   '("$" . end-of-line)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   ;; '("a" . meow-append)
      '("a" . avy-goto-line)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
                                        ;'("c" . meow-change)
   '("c" . evilnc-comment-or-uncomment-lines)
  ;'("C" . meow-change-save)
   '("C" . meow-comment)
   '("d" . meow-delete)
   '("fd" . dired)
   '("fr" . counsel-recentf)
   '("fb" . list-bookmarks)
   '("fs" . counsel-switch-buffer)
   '("fw" . plain-org-wiki)
   '("fj" . ess-eval-line)
   '("ft" . my-random-color-theme)
   '("/" . swiper)
   '(";" . smex)
   ;; '(";" . meow-M-x)
   '("-" . execute-extended-command)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   ;'("f" . meow-find)
   '("F" . meow-find-expand)
  ;'("g" . meow-cancel)
   ;; '("ga" . avy-goto-line)
   '("gl" . goto-last-change)
   '("gc" . ace-pinyin-jump-char-2)
   ;; '("G" . meow-grab)
   ;'("h" . meow-left)
   '("h" . meow-h-command)
   '("ho" . scimax-org/body)
   '("hb" . scimax-src-block-hydra/body)
   '("hs" . hydra-smartparens/body)
   '("hk" . one-key-menu-thing-edit)
   '("hr" . hydra-roam)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   ;; '("j" . meow-next)
   ;; '("j" . evil-join)
   '("j" . meow-join)
   '("J" . meow-next-expand)
                                           ;'("k" . meow-prev)
   '("k" . meow-kill)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
					;'("m" . meow-join)
					'("m" . magit-status)
   '("M" . delete-indentation)
   '("n" . meow-search)
   '("N" . meow-pop-search)
   '("o" . meow-block)
   '("O" . meow-block-expand)
   ;'("p" . meow-yank)
   '("P" . meow-yank-pop)
   '("q" . meow-quit)
   ;;'("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . aweshell-new)
                                        ;'("s" . meow-kill)
   '("t" . meow-till)
   '("T" . meow-till-expand)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("V" . meow-kmacro-matches)
   ;'("w" . meow-mark-word)
   '("w" . ace-window)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-kmacro-lines)
   '("y" . meow-yank)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("Z" . meow-pop-all-selection)
   '("&" . meow-query-replace)
   '("%" . meow-query-replace-regexp)
   ;; '(";" . meow-M-x)
   '("'" . repeat)
   '("\\" . quoted-insert)
   '("<f3>" . meow-start-kmacro)
   '("<f4>" . meow-end-or-call-kmacro)
   '("<escape>" . meow-last-buffer)))

(use-package meow
  :quelpa (meow :fetcher github :repo "DogLooksGood/meow")
    :demand t
    :ensure t
    :init
    (meow-global-mode 1)
    :custom
    (meow-expand-hint-remove-delay 3.0)
    :config
    (setq-default meow-replace-state-name-list
                  '((normal . "Ꮚ•-•Ꮚ")
                    (insert . "Ꮚ`-´Ꮚ")
                    (keypad . "Ꮚ'-'Ꮚ")
                    (motion . "Ꮚ-^-Ꮚ")))
    (add-to-list 'meow-char-thing-table '(?\] . line))
    (add-to-list 'meow-char-thing-table '(?\[ . line))

    (dolist (hook '(git-commit-mode-hook
		    magit-log-edit-mode-hook))
      (add-hook hook (lambda()(meow--switch-state 'insert))))

    ;; disable <backspace> work as meow-keypad-undo
    ;; since some useful command may use <backspace> key
    ;; such as C-x BS
    (define-key meow-keypad-state-keymap (kbd "<backspace>")
      'meow-keypad-self-insert)

    (define-key meow-keypad-state-keymap (kbd "DEL")
      'meow-keypad-self-insert)

    (meow-leader-define-key
     '("e" . my/selectrum-recentf-open-files)
     ;; '("e" . my/icomplete-recentf)
     '("." . find-file)
     '("p" . projectile-command-map)
     '("b" . switch-to-buffer)
     '("s" . save-buffer)
     '("j" . sp-join-sexp)
     '("(" . sp-wrap-round)
     '("[" . sp-wrap-square)
     '("{" . sp-wrap-curly)
     '("o" . ace-window)
     '("a" . delete-other-windows)
     '("-" . split-window-below)
     '("/" . swiper)
     '("\\" . split-window-right)
     '("w" . ace-swap-window)
     '("k" . kill-buffer)
     )
    ;; meow-setup is your custom function, see below
    (meow-setup)
    ;; If you want relative line number in NORMAL s tate(for display-line-numbers-mode)
    (meow-setup-line-number)
    ;; If you need setup indicator, see `meow-indicator' for customizing  hand.
    (meow-setup-indicator)

    (unbind-key (kbd "<escape>") meow-leader-keymap) ;; disable meow-temp-normal
    )

(provide 'init-meow)

;;; init-meow.el ends here
